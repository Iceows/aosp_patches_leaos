From 102862cd6494a52b633d39f1faf8e701d92f92be Mon Sep 17 00:00:00 2001
From: Li Li <dualli@google.com>
Date: Thu, 1 Jul 2021 15:10:05 -0700
Subject: [PATCH 09/10] libprocessgroup: Do not remove uid cgroups directory

In some rare cases, race happens between 2 processes in the same uid.

1. Process A is dying
2. system_server calls RemoveProcessGroup() for A
3. Zygote forks Process B with the same uid of A
4. system_server calls MkdirAndChown(uid) for B
5. system_server calls MkdirAndChown(uid, pid) for B

As 2 & 4/5 belong to different threads, 2 might happens before or after
step 4/5, or even in the middle of 4/5. In such a case, 4 or 5 will
fail, leaving process B in wrong (Zygote) group.

The uid dir is only created when the corresponding apps have been
launched at least once. It's reasonable to assume one of them is going
to be launched again. Deleting and recreating the uid dir just slows
down applaunch.

Introducing a new lock in libprocessgroup can also solve the race issue.
But that will slow down the applaunch further.

Therefore, reusing the uid dir is an optimized way to solve the race.

Ignore-AOSP-First: Freezer is not a public feature yet

Bug: 192512069
Bug: 168907513
Test: Kill corresponding apps and check the uid cgroupfs dir
Merged-In: I2e91088f21f45e4eda6c709a4af65ace7e135801
Change-Id: I2e91088f21f45e4eda6c709a4af65ace7e135801
Signed-off-by: DennySPb <dennyspb@gmail.com>
---
 libprocessgroup/processgroup.cpp | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/libprocessgroup/processgroup.cpp b/libprocessgroup/processgroup.cpp
index d669ebe7f..7be04febd 100644
--- a/libprocessgroup/processgroup.cpp
+++ b/libprocessgroup/processgroup.cpp
@@ -137,9 +137,6 @@ static int RemoveProcessGroup(const char* cgroup, uid_t uid, int pid) {
     auto uid_pid_path = ConvertUidPidToPath(cgroup, uid, pid);
     ret = rmdir(uid_pid_path.c_str());
 
-    auto uid_path = ConvertUidToPath(cgroup, uid);
-    rmdir(uid_path.c_str());
-
     return ret;
 }
 
-- 
2.30.2

