From 349afcd8eedd3e1e8b48efb4e610c14fa60fe706 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Tue, 14 Aug 2018 16:59:12 +0200
Subject: [PATCH 1/4] Revert "SupplicantManager: Remove
 |ensure_config_file_exists|"

This reverts commit f61dc8cd7dadda5741d6e4a1bb6b576ba89cc24b.
---
 libwifi_system/supplicant_manager.cpp | 97 +++++++++++++++++++++++++++
 1 file changed, 97 insertions(+)

diff --git a/libwifi_system/supplicant_manager.cpp b/libwifi_system/supplicant_manager.cpp
index 60720d40f..f22eea92e 100644
--- a/libwifi_system/supplicant_manager.cpp
+++ b/libwifi_system/supplicant_manager.cpp
@@ -33,7 +33,89 @@ namespace wifi_system {
 namespace {
 
 const char kSupplicantInitProperty[] = "init.svc.wpa_supplicant";
+const char kSupplicantConfigTemplatePath[] =
+    "/etc/wifi/wpa_supplicant.conf";
+const char kSupplicantConfigFile[] = "/data/misc/wifi/wpa_supplicant.conf";
+const char kP2pConfigFile[] = "/data/misc/wifi/p2p_supplicant.conf";
 const char kSupplicantServiceName[] = "wpa_supplicant";
+constexpr mode_t kConfigFileMode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP;
+
+int ensure_config_file_exists(const char* config_file) {
+  char buf[2048];
+  int srcfd, destfd;
+  int nread;
+  int ret;
+  std::string templatePath;
+
+  ret = access(config_file, R_OK | W_OK);
+  if ((ret == 0) || (errno == EACCES)) {
+    if ((ret != 0) && (chmod(config_file, kConfigFileMode) != 0)) {
+      LOG(ERROR) << "Cannot set RW to \"" << config_file << "\": "
+                 << strerror(errno);
+      return false;
+    }
+    return true;
+  } else if (errno != ENOENT) {
+    LOG(ERROR) << "Cannot access \"" << config_file << "\": "
+               << strerror(errno);
+    return false;
+  }
+
+  std::string configPathSystem =
+      std::string("/system") + std::string(kSupplicantConfigTemplatePath);
+  std::string configPathVendor =
+      std::string("/vendor") + std::string(kSupplicantConfigTemplatePath);
+  srcfd = TEMP_FAILURE_RETRY(open(configPathSystem.c_str(), O_RDONLY));
+  templatePath = configPathSystem;
+  if (srcfd < 0) {
+    int errnoSystem = errno;
+    srcfd = TEMP_FAILURE_RETRY(open(configPathVendor.c_str(), O_RDONLY));
+    templatePath = configPathVendor;
+    if (srcfd < 0) {
+      int errnoVendor = errno;
+      LOG(ERROR) << "Cannot open \"" << configPathSystem << "\": "
+                 << strerror(errnoSystem);
+      LOG(ERROR) << "Cannot open \"" << configPathVendor << "\": "
+                 << strerror(errnoVendor);
+      return false;
+    }
+  }
+
+  destfd = TEMP_FAILURE_RETRY(open(config_file,
+                                   O_CREAT | O_RDWR,
+                                   kConfigFileMode));
+  if (destfd < 0) {
+    close(srcfd);
+    LOG(ERROR) << "Cannot create \"" << config_file << "\": "
+               << strerror(errno);
+    return false;
+  }
+
+  while ((nread = TEMP_FAILURE_RETRY(read(srcfd, buf, sizeof(buf)))) != 0) {
+    if (nread < 0) {
+      LOG(ERROR) << "Error reading \"" << templatePath
+                 << "\": " << strerror(errno);
+      close(srcfd);
+      close(destfd);
+      unlink(config_file);
+      return false;
+    }
+    TEMP_FAILURE_RETRY(write(destfd, buf, nread));
+  }
+
+  close(destfd);
+  close(srcfd);
+
+  /* chmod is needed because open() didn't set permisions properly */
+  if (chmod(config_file, kConfigFileMode) < 0) {
+    LOG(ERROR) << "Error changing permissions of " << config_file
+               << " to 0660: " << strerror(errno);
+    unlink(config_file);
+    return false;
+  }
+
+  return true;
+}
 
 }  // namespace
 
@@ -49,6 +131,21 @@ bool SupplicantManager::StartSupplicant() {
     return true;
   }
 
+  /* Before starting the daemon, make sure its config file exists */
+  if (ensure_config_file_exists(kSupplicantConfigFile) < 0) {
+    LOG(ERROR) << "Wi-Fi will not be enabled";
+    return false;
+  }
+
+  /*
+   * Some devices have another configuration file for the p2p interface.
+   * However, not all devices have this, and we'll let it slide if it
+   * is missing.  For devices that do expect this file to exist,
+   * supplicant will refuse to start and emit a good error message.
+   * No need to check for it here.
+   */
+  (void)ensure_config_file_exists(kP2pConfigFile);
+
   /*
    * Get a reference to the status property, so we can distinguish
    * the case where it goes stopped => running => stopped (i.e.,
-- 
2.25.1

