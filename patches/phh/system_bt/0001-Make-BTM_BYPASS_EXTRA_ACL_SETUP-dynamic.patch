From 7147e06d0ae46772c1fd0d49deab7abae75d46ee Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Tue, 20 Feb 2018 23:04:50 +0100
Subject: [PATCH 1/5] Make BTM_BYPASS_EXTRA_ACL_SETUP dynamic

Change-Id: Icb0868566b29b053ed7e83c9fd32e225af3f2e46
---
 hci/include/bt_hci_bdroid.h  |  3 +++
 internal_include/bt_target.h |  3 +++
 stack/btm/btm_acl.cc         | 20 ++++++++++----------
 stack/btm/btm_sec.cc         | 18 +++++++++---------
 4 files changed, 25 insertions(+), 19 deletions(-)

diff --git a/hci/include/bt_hci_bdroid.h b/hci/include/bt_hci_bdroid.h
index 110354f05..b81185e2c 100644
--- a/hci/include/bt_hci_bdroid.h
+++ b/hci/include/bt_hci_bdroid.h
@@ -32,6 +32,9 @@
 #ifdef HAS_BDROID_BUILDCFG
 #include "bdroid_buildcfg.h"
 #endif
+#ifndef BTM_BYPASS_EXTRA_ACL_SETUP
+#define BTM_BYPASS_EXTRA_ACL_SETUP TRUE
+#endif
 
 /******************************************************************************
  *  Constants & Macros
diff --git a/internal_include/bt_target.h b/internal_include/bt_target.h
index 63b00b00c..004c0cc66 100644
--- a/internal_include/bt_target.h
+++ b/internal_include/bt_target.h
@@ -32,6 +32,9 @@
 #ifdef HAS_BDROID_BUILDCFG
 #include "bdroid_buildcfg.h"
 #endif
+#ifndef BTM_BYPASS_EXTRA_ACL_SETUP
+#define BTM_BYPASS_EXTRA_ACL_SETUP TRUE
+#endif
 
 #include "bt_types.h" /* This must be defined AFTER buildcfg.h */
 
diff --git a/stack/btm/btm_acl.cc b/stack/btm/btm_acl.cc
index 2c7bebd63..a20e6de34 100644
--- a/stack/btm/btm_acl.cc
+++ b/stack/btm/btm_acl.cc
@@ -1209,17 +1209,17 @@ void btm_read_remote_ext_features_failed(uint8_t status, uint16_t handle) {
 void btm_establish_continue(tACL_CONN* p_acl_cb) {
   tBTM_BL_EVENT_DATA evt_data;
   BTM_TRACE_DEBUG("btm_establish_continue");
-#if (BTM_BYPASS_EXTRA_ACL_SETUP == FALSE)
-  if (p_acl_cb->transport == BT_TRANSPORT_BR_EDR) {
-    /* For now there are a some devices that do not like sending */
-    /* commands events and data at the same time. */
-    /* Set the packet types to the default allowed by the device */
-    btm_set_packet_types(p_acl_cb, btm_cb.btm_acl_pkt_types_supported);
-
-    if (btm_cb.btm_def_link_policy)
-      BTM_SetLinkPolicy(p_acl_cb->remote_addr, &btm_cb.btm_def_link_policy);
+  if (!BTM_BYPASS_EXTRA_ACL_SETUP) {
+    if (p_acl_cb->transport == BT_TRANSPORT_BR_EDR) {
+      /* For now there are a some devices that do not like sending */
+      /* commands events and data at the same time. */
+      /* Set the packet types to the default allowed by the device */
+      btm_set_packet_types(p_acl_cb, btm_cb.btm_acl_pkt_types_supported);
+
+      if (btm_cb.btm_def_link_policy)
+        BTM_SetLinkPolicy(p_acl_cb->remote_addr, &btm_cb.btm_def_link_policy);
+    }
   }
-#endif
   if (p_acl_cb->link_up_issued) {
     BTM_TRACE_ERROR("%s: Already link is up ", __func__);
     return;
diff --git a/stack/btm/btm_sec.cc b/stack/btm/btm_sec.cc
index bdda174ac..d04741367 100644
--- a/stack/btm/btm_sec.cc
+++ b/stack/btm/btm_sec.cc
@@ -4168,15 +4168,15 @@ void btm_sec_connected(const RawAddress& bda, uint16_t handle, uint8_t status,
   if (p_acl_cb) {
 /* whatever is in btm_establish_continue() without reporting the BTM_BL_CONN_EVT
  * event */
-#if (BTM_BYPASS_EXTRA_ACL_SETUP == FALSE)
-    /* For now there are a some devices that do not like sending */
-    /* commands events and data at the same time. */
-    /* Set the packet types to the default allowed by the device */
-    btm_set_packet_types(p_acl_cb, btm_cb.btm_acl_pkt_types_supported);
-
-    if (btm_cb.btm_def_link_policy)
-      BTM_SetLinkPolicy(p_acl_cb->remote_addr, &btm_cb.btm_def_link_policy);
-#endif
+    if(!BTM_BYPASS_EXTRA_ACL_SETUP) {
+      /* For now there are a some devices that do not like sending */
+      /* commands events and data at the same time. */
+      /* Set the packet types to the default allowed by the device */
+      btm_set_packet_types(p_acl_cb, btm_cb.btm_acl_pkt_types_supported);
+
+      if (btm_cb.btm_def_link_policy)
+        BTM_SetLinkPolicy(p_acl_cb->remote_addr, &btm_cb.btm_def_link_policy);
+    }
   }
   btm_acl_created(bda, p_dev_rec->dev_class, p_dev_rec->sec_bd_name, handle,
                   HCI_ROLE_SLAVE, BT_TRANSPORT_BR_EDR);
-- 
2.30.2

